<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bazinga.replay.dao.PlankExchangeDailyDAO">

    <resultMap id="BaseResultMap" type="com.bazinga.replay.model.PlankExchangeDaily">
        <id column="id" jdbcType="BIGINT"  property="id" />
        <result column="stock_code" jdbcType="VARCHAR" property="stockCode"/>
        <result column="stock_name" jdbcType="VARCHAR" property="stockName"/>
        <result column="trade_date" jdbcType="VARCHAR" property="tradeDate"/>
        <result column="plank_type" jdbcType="TINYINT" property="plankType"/>
        <result column="max_exchange_money_date" jdbcType="VARCHAR" property="maxExchangeMoneyDate"/>
        <result column="exchange_money" jdbcType="DECIMAL" property="exchangeMoney"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>


    <sql id="Base_Column_List">
        id,
            stock_code,
            stock_name,
            trade_date,
            plank_type,
            max_exchange_money_date,
            exchange_money,
            create_time,
            update_time
        </sql>


    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from plank_exchange_daily
        where id = #{id}
    </select>


    <insert id="insert" parameterType="com.bazinga.replay.model.PlankExchangeDaily" useGeneratedKeys="true" keyProperty="id">
        insert into plank_exchange_daily (<include refid="Base_Column_List" />)
        values(
        #{id, jdbcType=BIGINT},
            #{stockCode, jdbcType=VARCHAR},
            #{stockName, jdbcType=VARCHAR},
            #{tradeDate, jdbcType=VARCHAR},
            #{plankType, jdbcType=TINYINT},
            #{maxExchangeMoneyDate, jdbcType=VARCHAR},
            #{exchangeMoney, jdbcType=DECIMAL},
            #{createTime, jdbcType=TIMESTAMP},
            #{updateTime, jdbcType=TIMESTAMP}
            )
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.bazinga.replay.model.PlankExchangeDaily">
        update plank_exchange_daily
        <set>
            <if test="stockCode != null">
                stock_code = #{stockCode, jdbcType=VARCHAR},
            </if>
            <if test="stockName != null">
                stock_name = #{stockName, jdbcType=VARCHAR},
            </if>
            <if test="tradeDate != null">
                trade_date = #{tradeDate, jdbcType=VARCHAR},
            </if>
            <if test="plankType != null">
                plank_type = #{plankType, jdbcType=TINYINT},
            </if>
            <if test="maxExchangeMoneyDate != null">
                max_exchange_money_date = #{maxExchangeMoneyDate, jdbcType=VARCHAR},
            </if>
            <if test="exchangeMoney != null">
                exchange_money = #{exchangeMoney, jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime, jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id} limit 1
    </update>

    <sql id="Equal_Where_List">
        <if test="stockCode != null">
            and stock_code = #{stockCode, jdbcType=VARCHAR}
        </if>
        <if test="stockName != null">
            and stock_name = #{stockName, jdbcType=VARCHAR}
        </if>
        <if test="tradeDate != null">
            and trade_date = #{tradeDate, jdbcType=VARCHAR}
        </if>
        <if test="plankType != null">
            and plank_type = #{plankType, jdbcType=TINYINT}
        </if>
        <if test="maxExchangeMoneyDate != null">
            and max_exchange_money_date = #{maxExchangeMoneyDate, jdbcType=VARCHAR}
        </if>
        <if test="exchangeMoney != null">
            and exchange_money = #{exchangeMoney, jdbcType=DECIMAL}
        </if>
    </sql>

    <sql id="Range_Where_List">
        <if test="createTimeFrom != null">
            <![CDATA[
            and create_time >= #{createTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="createTimeTo != null">
            <![CDATA[
            and create_time <= #{createTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="updateTimeFrom != null">
            <![CDATA[
            and update_time >= #{updateTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="updateTimeTo != null">
            <![CDATA[
            and update_time <= #{updateTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
    </sql>

    <sql id="GtLastMaxId_Where">
        <if test="lastMaxId != null and lastMaxId > 0">
            and id > #{lastMaxId}
        </if>
    </sql>

    <sql id="Order_By">
        <if test="sorts != null and sorts.size > 0">
            ORDER BY
            <foreach collection="sorts" item="sortItem" separator=",">
                ${sortItem.column} ${sortItem.type.message}
            </foreach>
        </if>
    </sql>

    <select id="selectByCondition" parameterType="com.bazinga.replay.query.PlankExchangeDailyQuery" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from plank_exchange_daily
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
            <include refid="GtLastMaxId_Where" />
        </where>
        <include refid="Order_By"/>
        <if test="limit > 0">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="countByCondition" parameterType="com.bazinga.replay.query.PlankExchangeDailyQuery" resultType="java.lang.Integer">
        select count(1)
        from plank_exchange_daily
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
        </where>
    </select>


</mapper>