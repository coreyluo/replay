<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bazinga.replay.dao.CirculateInfoAllDAO">

    <resultMap id="BaseResultMap" type="com.bazinga.replay.model.CirculateInfoAll">
        <id column="id" jdbcType="BIGINT"  property="id" />
        <result column="stock" jdbcType="VARCHAR" property="stock"/>
        <result column="stock_name" jdbcType="VARCHAR" property="stockName"/>
        <result column="circulate" jdbcType="BIGINT" property="circulate"/>
        <result column="stock_type" jdbcType="TINYINT" property="stockType"/>
        <result column="circulate_z" jdbcType="BIGINT" property="circulateZ"/>
        <result column="year_quater" jdbcType="VARCHAR" property="yearQuater"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>


    <sql id="Base_Column_List">
        id,
            stock,
            stock_name,
            circulate,
            stock_type,
            circulate_z,
            year_quater,
            create_time
        </sql>


    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from circulate_info_all
        where id = #{id}
    </select>


    <insert id="insert" parameterType="com.bazinga.replay.model.CirculateInfoAll" useGeneratedKeys="true" keyProperty="id">
        insert into circulate_info_all (<include refid="Base_Column_List" />)
        values(
        #{id, jdbcType=BIGINT},
            #{stock, jdbcType=VARCHAR},
            #{stockName, jdbcType=VARCHAR},
            #{circulate, jdbcType=BIGINT},
            #{stockType, jdbcType=TINYINT},
            #{circulateZ, jdbcType=BIGINT},
            #{yearQuater, jdbcType=VARCHAR},
            #{createTime, jdbcType=TIMESTAMP}
            )
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.bazinga.replay.model.CirculateInfoAll">
        update circulate_info_all
        <set>
            <if test="stock != null">
                stock = #{stock, jdbcType=VARCHAR},
            </if>
            <if test="stockName != null">
                stock_name = #{stockName, jdbcType=VARCHAR},
            </if>
            <if test="circulate != null">
                circulate = #{circulate, jdbcType=BIGINT},
            </if>
            <if test="stockType != null">
                stock_type = #{stockType, jdbcType=TINYINT},
            </if>
            <if test="circulateZ != null">
                circulate_z = #{circulateZ, jdbcType=BIGINT},
            </if>
            <if test="yearQuater != null">
                year_quater = #{yearQuater, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id} limit 1
    </update>

    <sql id="Equal_Where_List">
        <if test="stock != null">
            and stock = #{stock, jdbcType=VARCHAR}
        </if>
        <if test="stockName != null">
            and stock_name = #{stockName, jdbcType=VARCHAR}
        </if>
        <if test="circulate != null">
            and circulate = #{circulate, jdbcType=BIGINT}
        </if>
        <if test="stockType != null">
            and stock_type = #{stockType, jdbcType=TINYINT}
        </if>
        <if test="circulateZ != null">
            and circulate_z = #{circulateZ, jdbcType=BIGINT}
        </if>
        <if test="yearQuater != null">
            and year_quater = #{yearQuater, jdbcType=VARCHAR}
        </if>
    </sql>

    <sql id="Range_Where_List">
        <if test="createTimeFrom != null">
            <![CDATA[
            and create_time >= #{createTimeFrom, jdbcType=TIMESTAMP}
            ]]>
        </if>
        <if test="createTimeTo != null">
            <![CDATA[
            and create_time <= #{createTimeTo, jdbcType=TIMESTAMP}
            ]]>
        </if>
    </sql>

    <sql id="GtLastMaxId_Where">
        <if test="lastMaxId != null and lastMaxId > 0">
            and id > #{lastMaxId}
        </if>
    </sql>

    <sql id="Order_By">
        <if test="sorts != null and sorts.size > 0">
            ORDER BY
            <foreach collection="sorts" item="sortItem" separator=",">
                ${sortItem.column} ${sortItem.type.message}
            </foreach>
        </if>
    </sql>

    <select id="selectByCondition" parameterType="com.bazinga.replay.query.CirculateInfoAllQuery" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from circulate_info_all
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
            <include refid="GtLastMaxId_Where" />
        </where>
        <include refid="Order_By"/>
        <if test="limit > 0">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="countByCondition" parameterType="com.bazinga.replay.query.CirculateInfoAllQuery" resultType="java.lang.Integer">
        select count(1)
        from circulate_info_all
        <where>
            <include refid="Equal_Where_List"/>
            <include refid="Range_Where_List"/>
        </where>
    </select>


</mapper>